#!/usr/bin/env node

process.env.DEBUG = process.env.DEBUG || 'http2,http2:error*,ssl:certificate*';

const koa       = require('koa');
const debugLog  = require('debug')('http2');
const {resolve} = require('path');

const app = new koa();

const {
  sslPort, httpPort, address, silent, push, cache, maxAge, trustCert,
  log, cors, ssl, compression, autoindex, index, URL, serverType, generateCert,
  proxy,
  args: [
    path = '.'
  ]
} = require('./options')

const onServerStart = () => {
  debugLog(`${serverType} server started on ${URL}`)
  debugLog(`Serve static from ${resolve(path)}`)
}

// const startRedirectServer = () =>
//   require('express')()
//     .use(require('redirect-https')({port: sslPort}))
//     .listen(httpPort, () => debugLog(`Http redirects to https from ${httpPort}`))


if (generateCert)
  return require('./generateCertificates').generate()

if (trustCert)
  return require('./generateCertificates').trust()

// if (cors)
//   app.use(require('cors')())
//

// if (ssl && push)
//   require('./naivePush').map(x => app.use(x))
//

// if (!silent)
//   app.use(require('morgan')(log))
//
// app.use((req, res, next) => {
//   if (!cache) res.set('Cache-Control', 'no-cache')
//   next()
// })
//
// app.use(require('serve-static')(path, {
//   index, maxAge, cacheControl: Boolean(cache || maxAge)
// }))
//
// if (require('./options')['404']) {
//   const errorPage = require('fs').readFileSync(require('./options')['404'], 'utf-8')
//   app.use((req, res) => res.status(404).send(errorPage).end())
// }
//
// if (proxy) {
//   app.use((req, res) =>
//     require('http-proxy').createProxyServer({
//       secure: false,
//       xfwd: true,
//       changeOrigin: true,
//     }).web(req, res, { target: proxy })
//   )
// }
//
// if (autoindex)
//   app.use(require('serve-index')(path))

app.use(require('koa-static')("./", {
  gzip: compression,
  br: compression
}));

require('./ssl').then(options => {
  const http2 = require('http2');
  const path = require('path');

  const certs = {
    key: options.key || path.join(__dirname, 'certs/key.pem'),
    cert: options.cert || path.join(__dirname, './certs/cert.pem')
  };

  const server = http2.createSecureServer(certs, app.callback());
  server.listen(ssl ? sslPort : httpPort);

  onServerStart();
  // if (ssl) {
  //   startRedirectServer();
  // }
});
